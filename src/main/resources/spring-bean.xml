<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
	    <!--1645-->

       <!-- 扫描注解 
       	在spring配置中，扫描除了@Controller的注解
       	spring相当于父容器
       -->
       <context:component-scan base-package="com.qianfeng">
       <!-- 扫描时，排除指定的注解 -->
       		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan> 
     
     <!-- 1 druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/oa1808" />
		<property name="username" value="root" />
		<property name="password" value="673686" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="10" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="10000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="testWhileIdle" value="true" />
		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		
	</bean>
	
	<!-- 2 创建Mybatis的工厂对象 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--设置数据库连接池 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 加载mybatis主配置文件
			classpath: 表示文件所在的路径
				如果是普通的java程序，classpath表示bin目录的路径
				如果是web程序，classpath 表示classes目录的路径
		 -->
		<property name="configLocation" value="classpath:mybatis.xml"/>
		
		<!-- 加载映射文件
			*.xml 表示所有的xml文件
		 -->
		<property name="mapperLocations" value="classpath:com/qianfeng/mapping/*.xml"/>
	</bean>
	<!--3设置Mybatis的映射接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<!-- 设置dao所在包 -->
		<property name="basePackage" value="com.qianfeng.dao"></property>
	</bean>
	
	<!-- 4配置事务管理类 -->
   	<bean id="txManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		
   		<property name="dataSource" ref="dataSource"></property>
   	</bean>
   
    <!-- 5配置事务的特性 -->
   <tx:advice id="txAdvice" transaction-manager="txManage">
   		<tx:attributes>
   			<!-- 针对使用事务的add开头的方法 
   			read-only 是否只读，true 是，false 可读可写
   			如果有插入等操作，设为为true，运行程序会报异常-->
   			<tx:method name="add*" read-only="false" propagation="REQUIRED"/>
   			<tx:method name="delete*" read-only="false"  propagation="REQUIRED"/>
   			<tx:method name="update*" read-only="false"  propagation="REQUIRED"/>
   			<tx:method name="find*" read-only="true"  propagation="REQUIRED"/>
   			<!-- 针对其余的方法 -->
   			<tx:method name="*" propagation="NOT_SUPPORTED"/>
   			
   		</tx:attributes>
   </tx:advice>
   
   <!-- 6 AOP配置 -->
   <aop:config>
   		<!-- 切入点 -->
   		<aop:pointcut expression="execution(* com.qianfeng.service.impl.*.*(..))" id="pc"/>
   
   		<!-- 通知 -->
   		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
   
   </aop:config>

	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.qianfeng.realm.MyRealm">
		<!-- 配置密码匹配器 -->
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1"></property>
			</bean>
		</property>
	</bean>


	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"/>
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置超时时间 -->
		<property name="globalSessionTimeout" value="1800000"/>
		<property name="deleteInvalidSessions" value="true"/>
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>

	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 设置Cookie名字, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
        当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
		<property name="name" value="Shiro_JSESSIONID"/>
		<!--<property name="domain" value=""/>
		<property name="path" value=""/>-->
		<property name="maxAge" value="1800"/>
		<property name="httpOnly" value="false"/>
	</bean>

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 未登陆时，访问需要认证的资源，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="/login.html"/>
		<!-- 权限认证失败，则跳转到指定页面 -->
		<!--<property name="unauthorizedUrl" value="/unauthorized.jsp"/>-->
		<!--  设置自定义的filter -->
		<property name="filters">
			<map>
				<!--  注意key的值 -->
				<entry key="perms" value-ref="myPermFilter" />
			</map>
		</property>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				<!--  一般设置和认证相关的配置
				 	和权限相关的一般使用注解
				 -->
				/login.html = anon
				/login.do = anon
				<!-- 静态资源匿名访问 -->
				/media/js/** = anon
				/media/css/** =anon
				/media/fonts/** = anon
				/media/images/** = anon
				/media/layui/css/**= anon
				/media/layui/css/modules/laydate/default/** = anon
				/media/layui/font/** = anon
				/media/layui/images/face/** = anon
				/media/layui/lay/modules/** = anon
				/media/layui/** = anon
				/media/term/** = anon
				/static/** = anon
				/test1.do = perms["user:list"]
				/test2.do = perms["aaaa"]
				<!-- 配置退出的操作 ,如果使用了rememberMe，还会删除rememberMe的cookie-->
				/userloginout.do = logout
				<!--  访问其他没有匹配上的资源时，都经过身份认证 -->
				/** = authc
			</value>
		</property>
	</bean>
	<!--  创建自定义的授权处理的对象 -->
	<bean id="myPermFilter" class="com.qianfeng.realm.MyPermFilter"></bean>
	<!-- 手动创建了一个logout过滤器的对象，id和 -->
	<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/login.html" />
	</bean>

</beans>